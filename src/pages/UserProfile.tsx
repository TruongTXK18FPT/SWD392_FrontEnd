// (ƒê·∫ßu file gi·ªØ nguy√™n)
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import axios from 'axios';
import '../styles/UserProfile.css';
import NewsSlider from '../components/NewsSlider';
import PersonalityTypes from '../components/PersonalityTypes';
import ChatbotPreview from '../components/ChatbotPreview';
import Footer from '../components/Footer';
import '../styles/Home.css';

const UserProfile: React.FC = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [profile, setProfile] = useState<any>(null);

  // ‚úÖ H√ÄM K√âO API GET PROFILE
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await axios.get('http://localhost:8080/user/api/profiles/1');
        console.log("üì¶ D·ªØ li·ªáu l·∫•y v·ªÅ t·ª´ API:", res.data);
        setProfile(res.data);
      } catch (err) {
        console.error('‚ùå L·ªói khi fetch user profile:', err);
      }
    };
    fetchProfile();
  }, []);

  // ‚úÖ H√ÄM M·ªöI: G·ªåI API POST ƒë·ªÉ UPDATE PROFILE
const updateUserProfile = async (userId: number, updatedProfile: any) => {
  try {
    // ‚úÖ ƒê·ªãnh d·∫°ng ng√†y sinh th√†nh yyyy-MM-dd
    const convertDateToISO = (dateStr: string) => {
      const date = new Date(dateStr);
      return date.toISOString().split('T')[0]; // yyyy-MM-dd
    };

    const fixedProfile = {
      ...updatedProfile,
      birthDay: convertDateToISO(updatedProfile.birthDay),
    };

    console.log("üì§ Payload g·ª≠i ƒëi:", fixedProfile); // ƒë·ªÉ ki·ªÉm tra

    const res = await axios.post(`http://localhost:8080/user/api/profiles/1`, fixedProfile);
    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t:", res.data);
    return res.data;
  } catch (err) {
    console.error('‚ùå API l·ªói khi c·∫≠p nh·∫≠t:', err);
    throw err;
  }
};


  // ‚úÖ X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setProfile((prev: any) => ({ ...prev, [name]: value }));
  };

  // ‚úÖ H√†m l∆∞u l·∫°i sau khi ch·ªânh s·ª≠a
  const handleSave = async () => {
    try {
      await updateUserProfile(profile.profileId, profile);
      setIsEditing(false);
    } catch (err) {
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
  };

  const handleToggleDarkMode = () => {
    setIsDarkMode((prev) => !prev);
  };

  if (!profile) return <div>Loading...</div>;

  return (
    <div className={`home-container ${isDarkMode ? 'dark-mode' : ''}`}>
      <motion.section
        className="user-info-section"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        <motion.div
          className="user-info-card"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <div className="user-image-wrapper">
            <img
              src={profile.imageUrl ? profile.imageUrl : '/src/assets/user-avatar.png'}
              alt="User Avatar"
              className="user-avatar"
            />
          </div>
          <div className="user-details">
            <h2>Th√¥ng tin c√° nh√¢n</h2>
            {!isEditing ? (
              <>
                <ul>
                  <li><strong>ID:</strong> {profile.profileId}</li>
                  <li><strong>H·ªç t√™n:</strong> {profile.fullName}</li>
                  <li><strong>Ng√†y sinh:</strong> {profile.birthDay}</li>
                  <li><strong>Gi·ªõi t√≠nh:</strong> {profile.gender}</li>
                  <li><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {profile.phoneNumber}</li>
                  <li><strong>ƒê·ªãa ch·ªâ:</strong> {profile.address}</li>
                  <li><strong>Tr∆∞·ªùng:</strong> {profile.school}</li>
                  <li><strong>Lo·∫°i T√†i Kho·∫£n:</strong> {profile.accountType}</li>
                </ul>
                <button onClick={() => setIsEditing(true)} className="edit-btn">Ch·ªânh s·ª≠a</button>
              </>
            ) : (
              <>
                <div className="edit-form">
                  <label>H·ªç t√™n: <input name="fullName" value={profile.fullName} onChange={handleInputChange} /></label>
                  <label>Ng√†y sinh: <input type="date" name="birthDay" value={profile.birthDay} onChange={handleInputChange} /></label>
                  <label>Gi·ªõi t√≠nh:
                    <select name="gender" value={profile.gender} onChange={handleInputChange}>
                      <option value="MALE">Nam</option>
                      <option value="FEMALE">N·ªØ</option>
                    </select>
                  </label>
                  <label>S·ªë ƒëi·ªán tho·∫°i: <input name="phoneNumber" value={profile.phoneNumber} onChange={handleInputChange} /></label>
                  <label>ƒê·ªãa ch·ªâ: <input name="address" value={profile.address} onChange={handleInputChange} /></label>
                  <label>Tr∆∞·ªùng: <input name="school" value={profile.school} onChange={handleInputChange} /></label>
                  <label>Lo·∫°i t√†i kho·∫£n: <input name="accountType" value={profile.accountType} onChange={handleInputChange} /></label>
                </div>
                <div className="edit-buttons">
                  <button onClick={handleSave} className="save-btn">L∆∞u</button>
                  <button onClick={handleCancel} className="cancel-btn">H·ªßy</button>
                </div>
              </>
            )}
          </div>
        </motion.div>
      </motion.section>

      <div className="main-content">
        <motion.div
          className="main-grid"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.3 }}
        >
          <div className="left-column">
            <PersonalityTypes />
          </div>

          <div className="result-card">
            <h3>üß† K·∫øt qu·∫£ t√≠nh c√°ch</h3>
            <p className="subtitle">Ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√≠nh c√°ch c·ªßa b·∫°n</p>

            <div className="trait-box">
              <div className="trait-header">
                <span>MBTI</span>
                <strong>ENFP</strong>
              </div>
              <div className="trait-bar-container">
                <div className="trait-bar mbti"></div>
              </div>
              <p className="trait-desc">Ng∆∞·ªùi truy·ªÅn c·∫£m h·ª©ng, s√°ng t·∫°o v√† nƒÉng ƒë·ªông</p>
            </div>

            <div className="trait-box">
              <div className="trait-header">
                <span>DISC</span>
                <strong>Influencer</strong>
              </div>
              <div className="trait-bar-container">
                <div className="trait-bar disc"></div>
              </div>
              <p className="trait-desc">C√≥ kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng v√† truy·ªÅn c·∫£m h·ª©ng cho ng∆∞·ªùi kh√°c</p>
            </div>

            <h3 className="activity-title">üïí Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>
            <ul className="activity-list">
              <li>
                <span>üìå MBTI - 15/1/2024</span>
                <span className="status done">Ho√†n th√†nh</span>
              </li>
              <li>
                <span>üìå DISC - 10/1/2024</span>
                <span className="status done">Ho√†n th√†nh</span>
              </li>
              <li>
                <span>üìå Big Five - 20/1/2024</span>
                <span className="status pending">ƒêang th·ª±c hi·ªán</span>
              </li>
            </ul>
          </div>

          <div className="right-column">
            <NewsSlider />
            <ChatbotPreview />
          </div>
        </motion.div>
      </div>

      <Footer />
    </div>
  );
};

export default UserProfile;
