import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { useNavigate } from "react-router-dom";
import { 
  FaBrain, 
  FaUserGraduate, 
  FaChartLine, 
  FaRobot, 
  FaUsers,
  FaUniversity,
  FaPlay,
  FaArrowRight,
  FaStar,
  FaQuoteLeft,
  FaLightbulb,
  FaBullseye,
  FaGraduationCap,
  FaHeart,
  FaUserTie,
  FaChevronRight
} from "react-icons/fa";
import Footer from "../components/Footer";
import "../styles/Home.css";

interface FeatureCard {
  id: string;
  title: string;
  description: string;
  icon: React.ReactElement;
  color: string;
  gradient: string;
}

interface TestimonialCard {
  id: string;
  name: string;
  role: string;
  content: string;
  avatar: string;
  rating: number;
}

interface ProcessStep {
  id: string;
  title: string;
  description: string;
  icon: React.ReactElement;
  number: number;
}

const featureCards: FeatureCard[] = [
  {
    id: "mbti",
    title: "MBTI Assessment",
    description: "Kh√°m ph√° 16 ki·ªÉu t√≠nh c√°ch Myers-Briggs v·ªõi ƒë·ªô ch√≠nh x√°c cao",
    icon: <FaBrain />,
    color: "#667eea",
    gradient: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
  },
  {
    id: "disc",
    title: "DISC Profiling",
    description: "Ph√¢n t√≠ch phong c√°ch h√†nh vi v√† giao ti·∫øp c√° nh√¢n",
    icon: <FaUsers />,
    color: "#f093fb",
    gradient: "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
  },
  {
    id: "career",
    title: "Career Recommendation",
    description: "G·ª£i √Ω ngh·ªÅ nghi·ªáp ph√π h·ª£p d·ª±a tr√™n k·∫øt qu·∫£ t√≠nh c√°ch",
    icon: <FaUserTie />,
    color: "#4facfe",
    gradient: "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
  },
  {
    id: "university",
    title: "University Matching",
    description: "T√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nƒÉng l·ª±c",
    icon: <FaUniversity />,
    color: "#43e97b",
    gradient: "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
  },
  {
    id: "ai-chat",
    title: "AI Chatbot",
    description: "T∆∞ v·∫•n c√° nh√¢n h√≥a t·ª´ tr√≠ tu·ªá nh√¢n t·∫°o 24/7",
    icon: <FaRobot />,
    color: "#fa709a",
    gradient: "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
  },
  {
    id: "parent-dashboard",
    title: "Parent Dashboard",
    description: "Theo d√µi ti·∫øn tr√¨nh con em v√† nh·∫≠n b√°o c√°o chi ti·∫øt",
    icon: <FaHeart />,
    color: "#a8edea",
    gradient: "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
  }
];

const testimonials: TestimonialCard[] = [
  {
    id: "1",
    name: "Nguy·ªÖn Minh Anh",
    role: "H·ªçc sinh l·ªõp 12",
    content: "Nh·ªù b√†i test n√†y m√† em ƒë√£ t·ª± tin h∆°n trong vi·ªác ch·ªçn ng√†nh h·ªçc. K·∫øt qu·∫£ r·∫•t ch√≠nh x√°c!",
    avatar: "üë©‚Äçüéì",
    rating: 5
  },
  {
    id: "2",
    name: "Tr·∫ßn VƒÉn Nam",
    role: "Sinh vi√™n nƒÉm 2",
    content: "Platform n√†y gi√∫p m√¨nh hi·ªÉu r√µ h∆°n v·ªÅ b·∫£n th√¢n v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai. R·∫•t h·ªØu √≠ch!",
    avatar: "üë®‚Äçüíº",
    rating: 5
  },
  {
    id: "3",
    name: "B√† L√™ Th·ªã Hoa",
    role: "Ph·ª• huynh",
    content: "T√¥i c√≥ th·ªÉ theo d√µi con m√¨nh v√† hi·ªÉu con t·ªët h∆°n qua b√°o c√°o chi ti·∫øt. Tuy·ªát v·ªùi!",
    avatar: "üë©‚Äçüíº",
    rating: 5
  }
];

const processSteps: ProcessStep[] = [
  {
    id: "register",
    title: "ƒêƒÉng k√Ω",
    description: "T·∫°o t√†i kho·∫£n mi·ªÖn ph√≠ ch·ªâ trong 30 gi√¢y",
    icon: <FaUserGraduate />,
    number: 1
  },
  {
    id: "quiz",
    title: "L√†m b√†i test",
    description: "Ho√†n th√†nh b√†i test t√≠nh c√°ch trong 15-20 ph√∫t",
    icon: <FaPlay />,
    number: 2
  },
  {
    id: "result",
    title: "Nh·∫≠n k·∫øt qu·∫£",
    description: "Xem ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√≠nh c√°ch c·ªßa b·∫°n",
    icon: <FaChartLine />,
    number: 3
  },
  {
    id: "career",
    title: "G·ª£i √Ω ngh·ªÅ nghi·ªáp",
    description: "Kh√°m ph√° nh·ªØng ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi b·∫°n",
    icon: <FaBullseye />,
    number: 4
  },
  {
    id: "university",
    title: "Ch·ªçn tr∆∞·ªùng ƒë·∫°i h·ªçc",
    description: "T√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p v·ªõi s·ªü th√≠ch",
    icon: <FaGraduationCap />,
    number: 5
  }
];

const Home: React.FC = () => {
  const [activeCard, setActiveCard] = useState<string | null>(null);
  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; delay: number }>>([]);
  const navigate = useNavigate();

  useEffect(() => {
    // Generate floating particles
    const particleArray = Array.from({ length: 50 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      delay: Math.random() * 5
    }));
    setParticles(particleArray);
  }, []);

  const handleStartQuiz = () => {
    navigate('/quiz');
  };

  const handleParentExplore = () => {
    navigate('/parent-dashboard');
  };

  return (
    <div className="home-container">
      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-background">
          <div className="gradient-overlay"></div>
          <div className="particles-container">
            {particles.map((particle) => (
              <motion.div
                key={particle.id}
                className="particle"
                initial={{ opacity: 0, scale: 0 }}
                animate={{ 
                  opacity: [0, 1, 0],
                  scale: [0, 1, 0],
                  x: [0, Math.random() * 100 - 50],
                  y: [0, Math.random() * 100 - 50]
                }}
                transition={{
                  duration: 4,
                  repeat: Infinity,
                  delay: particle.delay,
                  ease: "easeInOut"
                }}
                style={{
                  left: `${particle.x}%`,
                  top: `${particle.y}%`
                }}
              />
            ))}
          </div>
          <div className="wave-animation">
            <svg viewBox="0 0 1000 300" className="wave-svg">
              <path d="M0,100 C150,200 350,0 500,100 C650,200 850,0 1000,100 L1000,300 L0,300 Z" className="wave-path" />
            </svg>
          </div>
        </div>
        
        <div className="hero-content">
          <motion.div
            className="hero-badge"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <FaStar /> C√¥ng ngh·ªá AI ti√™n ti·∫øn
          </motion.div>
          <motion.h1
            className="hero-title"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            Discover Your Personality.
            <br />
            <span className="home-gradient-text">Design Your Future.</span>
          </motion.h1>
          
          <motion.p
            className="hero-subtitle"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
          >
            Kh√°m ph√° ti·ªÅm nƒÉng b·∫£n th√¢n qua c√°c b√†i test khoa h·ªçc, ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp 
            v√† l·ª±a ch·ªçn tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p v·ªõi t√≠nh c√°ch c·ªßa b·∫°n.
          </motion.p>
          
          <motion.div
            className="hero-buttons"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8 }}
          >
            <button className="btn-primary" onClick={handleStartQuiz}>
              <FaPlay />
              B·∫Øt ƒë·∫ßu b√†i test
            </button>
            <button className="btn-secondary" onClick={handleParentExplore}>
              <FaHeart />
              Kh√°m ph√° cho ph·ª• huynh
            </button>
          </motion.div>
        </div>
      </section>

      {/* Personality Types Introduction Section */}
      <section className="personality-intro-section">
        <div className="section-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            Kh√°m ph√° c√°c lo·∫°i t√≠nh c√°ch
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            Hi·ªÉu r√µ b·∫£n th√¢n th√¥ng qua c√°c ph∆∞∆°ng ph√°p ƒë√°nh gi√° t√≠nh c√°ch ƒë∆∞·ª£c c√¥ng nh·∫≠n tr√™n to√†n th·∫ø gi·ªõi
          </motion.p>
        </div>

        <div className="personality-types-grid">
          <motion.div
            className="personality-type-card"
            initial={{ opacity: 0, x: -50 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            <div className="type-icon">
              <FaBrain />
            </div>
            <h3>MBTI - Myers-Briggs</h3>
            <p>
              Ph√¢n lo·∫°i t√≠nh c√°ch th√†nh 16 ki·ªÉu d·ª±a tr√™n 4 c·∫∑p thang ƒëo: H∆∞·ªõng n·ªôi/H∆∞·ªõng ngo·∫°i (I/E), 
              C·∫£m gi√°c/Tr·ª±c gi√°c (S/N), Suy nghƒ©/C·∫£m x√∫c (T/F), Ph√°n ƒëo√°n/Nh·∫≠n th·ª©c (J/P).
            </p>
            <div className="type-examples">
              <span>INTJ</span>
              <span>ENFP</span>
              <span>ISTP</span>
              <span>ESFJ</span>
            </div>
          </motion.div>

          <motion.div
            className="personality-type-card"
            initial={{ opacity: 0, x: 50 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            <div className="type-icon">
              <FaUsers />
            </div>
            <h3>DISC Assessment</h3>
            <p>
              ƒê√°nh gi√° phong c√°ch h√†nh vi qua 4 y·∫øu t·ªë ch√≠nh: Dominant (Quy·∫øt ƒëo√°n), 
              Influence (·∫¢nh h∆∞·ªüng), Steadiness (·ªîn ƒë·ªãnh), Conscientiousness (T·ªâ m·ªâ).
            </p>
            <div className="type-examples">
              <span>D - Dominant</span>
              <span>I - Influence</span>
              <span>S - Steadiness</span>
              <span>C - Conscientiousness</span>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Features Section */}
      <section className="features-section">
        <div className="section-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            T√≠nh nƒÉng n·ªïi b·∫≠t
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            Tr·∫£i nghi·ªám c√¥ng ngh·ªá hi·ªán ƒë·∫°i v·ªõi c√°c t√≠nh nƒÉng ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng cho h·ªçc sinh v√† ph·ª• huynh
          </motion.p>
        </div>

        <div className="features-grid">
          {featureCards.map((feature, index) => (
            <motion.div
              key={feature.id}
              className={`feature-card ${activeCard === feature.id ? 'active' : ''}`}
              initial={{ opacity: 0, y: 50 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.1 }}
              whileHover={{ y: -10, scale: 1.02 }}
              onMouseEnter={() => setActiveCard(feature.id)}
              onMouseLeave={() => setActiveCard(null)}
            >
              <div className="feature-header" style={{ background: feature.gradient }}>
                <div className="feature-icon">{feature.icon}</div>
                <div className="feature-glow"></div>
              </div>
              <div className="feature-content">
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
                <div className="feature-arrow">
                  <FaChevronRight />
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </section>

      {/* Process Flow Section */}
      <section className="process-section">
        <div className="section-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            Quy tr√¨nh ƒë∆°n gi·∫£n
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            Ch·ªâ 5 b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ kh√°m ph√° b·∫£n th√¢n v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai
          </motion.p>
        </div>

        <div className="process-flow">
          {processSteps.map((step, index) => (
            <React.Fragment key={step.id}>
              <motion.div
                className="process-step"
                initial={{ opacity: 0, scale: 0.8 }}
                whileInView={{ opacity: 1, scale: 1 }}
                viewport={{ once: true }}
                transition={{ delay: index * 0.2 }}
                whileHover={{ scale: 1.05 }}
              >
                <div className="step-number">{step.number}</div>
                <div className="step-icon">{step.icon}</div>
                <h3>{step.title}</h3>
                <p>{step.description}</p>
              </motion.div>
              {index < processSteps.length - 1 && (
                <div className="process-arrow">
                  <FaArrowRight />
                </div>
              )}
            </React.Fragment>
          ))}
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="testimonials-section">
        <div className="section-header">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            Ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            H√†ng ngh√¨n h·ªçc sinh v√† ph·ª• huynh ƒë√£ tin t∆∞·ªüng v√† ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t√≠ch c·ª±c
          </motion.p>
        </div>

        <div className="testimonials-grid">
          {testimonials.map((testimonial, index) => (
            <motion.div
              key={testimonial.id}
              className="testimonial-card"
              initial={{ opacity: 0, y: 50 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              whileHover={{ y: -5, scale: 1.02 }}
            >
              <div className="testimonial-quote">
                <FaQuoteLeft />
              </div>
              <div className="testimonial-content">
                <p>"{testimonial.content}"</p>
              </div>
              <div className="testimonial-author">
                <div className="author-avatar">{testimonial.avatar}</div>
                <div className="author-info">
                  <h4>{testimonial.name}</h4>
                  <span>{testimonial.role}</span>
                  <div className="rating">
                    {Array.from({ length: testimonial.rating }).map((_, i) => (
                      <FaStar key={i} />
                    ))}
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </section>



      {/* CTA Section */}
      <section className="cta-section">
        <div className="cta-background">
          <div className="cta-particles">
            {Array.from({ length: 20 }).map((_, i) => (
              <motion.div
                key={i}
                className="cta-particle"
                animate={{
                  y: [0, -20, 0],
                  opacity: [0.3, 1, 0.3],
                  scale: [0.5, 1, 0.5]
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  delay: i * 0.2,
                  ease: "easeInOut"
                }}
              />
            ))}
          </div>
        </div>
        
        <div className="cta-content">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.2 }}
          >
            B·∫Øt ƒë·∫ßu h√†nh tr√¨nh kh√°m ph√° b·∫£n th√¢n
          </motion.h2>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.4 }}
          >
            H√£y ƒë·ªÉ ch√∫ng t√¥i ƒë·ªìng h√†nh c√πng b·∫°n trong vi·ªác t√¨m hi·ªÉu v·ªÅ ch√≠nh m√¨nh 
            v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai m·ªôt c√°ch khoa h·ªçc v√† ch√≠nh x√°c nh·∫•t.
          </motion.p>
          
          <motion.button
            className="cta-button"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.6 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleStartQuiz}
          >
            <FaLightbulb />
            Kh√°m ph√° ngay
          </motion.button>
        </div>
      </section>
      
      <Footer />
    </div>
  );
};

export default Home;
