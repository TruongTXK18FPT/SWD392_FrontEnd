import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { Seminar } from '../types/Seminar';
import { fetchSeminarDetails, placeOrder, fetchMyTickets, PlaceOrderResponse, UserTicket } from '../api/SeminarApi';
import { getCurrentUser } from '../services/userService';
import { getToken } from '../services/localStorageService';
import Button from '../components/Button';
import Alert from '../components/Alert';
import '../styles/SeminarDetailPage.css'; // n·∫øu c√≥

const SeminarDetailPage: React.FC = () => {
  const { seminarId } = useParams<{ seminarId: string }>();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [seminar, setSeminar] = useState<Seminar | null>(null);
  const [loading, setLoading] = useState(true);
  const [bookingLoading, setBookingLoading] = useState(false);
  const [description, setDescription] = useState('');
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [userHasTicket, setUserHasTicket] = useState(false);
  const [checkingTicket, setCheckingTicket] = useState(false);
  const [alert, setAlert] = useState<{
    show: boolean;
    type: 'success' | 'error' | 'warning';
    message: string;
    description?: string;
  }>({
    show: false,
    type: 'success',
    message: '',
  });

  useEffect(() => {
    // Check if user is authenticated
    const token = getToken();
    if (token) {
      getCurrentUser()
        .then((userData) => {
          setCurrentUser(userData);
        })
        .catch((error) => {
          console.error('Failed to get current user:', error);
        });
    }
  }, []);

  // Function to check if user has a ticket for this seminar
  const checkUserTicket = async (userId: number, seminarIdNum: number) => {
    if (!userId || !seminarIdNum) return;
    
    setCheckingTicket(true);
    try {
      const tickets = await fetchMyTickets(userId);
      console.log('üé´ All user tickets:', tickets);
      console.log('üîç Checking for seminar ID:', seminarIdNum);
      
      const hasTicket = tickets.some(ticket => {
        console.log(`üé´ Ticket ${ticket.id}: seminarId=${ticket.seminarId}, status=${ticket.status}`);
        const matches = ticket.seminarId === seminarIdNum && ticket.status === true;
        console.log(`üé´ Ticket ${ticket.id} matches current seminar: ${matches}`);
        return matches;
      });
      
      setUserHasTicket(hasTicket);
      console.log('‚úÖ User has ticket for this seminar:', hasTicket);
    } catch (error) {
      console.error('Failed to check user tickets:', error);
      setUserHasTicket(false);
    } finally {
      setCheckingTicket(false);
    }
  };

  // Reset booking state when component mounts or when user returns from payment
  useEffect(() => {
    setBookingLoading(false);
    
    // Check for payment status in URL parameters
    const paymentStatus = searchParams.get('payment');
    
    if (paymentStatus === 'success') {
      setAlert({
        show: true,
        type: 'success',
        message: 'Thanh to√°n th√†nh c√¥ng!',
        description: 'V√© h·ªôi th·∫£o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n s·ªõm.',
      });
      
      // Clear the URL parameter
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.delete('payment');
      window.history.replaceState({}, '', newUrl.toString());
      
    } else if (paymentStatus === 'cancelled') {
      setAlert({
        show: true,
        type: 'warning',
        message: 'Thanh to√°n ƒë√£ b·ªã h·ªßy',
        description: 'B·∫°n c√≥ th·ªÉ th·ª≠ ƒë·∫∑t v√© l·∫°i n·∫øu mu·ªën.',
      });
      
      // Clear the URL parameter
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.delete('payment');
      window.history.replaceState({}, '', newUrl.toString());
    }

    // Add event listener for when user returns to the page
    const handleFocus = () => {
      console.log('Page focused - resetting booking state');
      setBookingLoading(false);
    };

    window.addEventListener('focus', handleFocus);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
    };
  }, [searchParams]);

  useEffect(() => {
  if (!seminarId) {
    console.warn('seminarId is undefined');
    return;
  }

  setLoading(true);
  fetchSeminarDetails(seminarId)
    .then((data) => {
      console.log('Seminar data:', data); 
      setSeminar(data);
    })
    .catch((err) => {
      console.error(err);
      setAlert({
        show: true,
        type: 'error',
        message: 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt h·ªôi th·∫£o',
        description: 'Vui l√≤ng th·ª≠ l·∫°i sau',
      });
    })
    .finally(() => setLoading(false));
}, [seminarId]);

  // Check user ticket when both user and seminar data are available
  useEffect(() => {
    if (currentUser?.id && seminar?.id) {
      console.log('üîÑ Both user and seminar data available, checking ticket...');
      checkUserTicket(currentUser.id, seminar.id);
    }
  }, [currentUser, seminar]);

  const handleBookTicket = async () => {
    if (!currentUser) {
      setAlert({
        show: true,
        type: 'warning',
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p',
        description: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√© h·ªôi th·∫£o',
      });
      setTimeout(() => {
        navigate('/login');
      }, 2000);
      return;
    }

    if (!seminar) {
      setAlert({
        show: true,
        type: 'error',
        message: 'Kh√¥ng th·ªÉ ƒë·∫∑t v√©',
        description: 'Th√¥ng tin h·ªôi th·∫£o kh√¥ng kh·∫£ d·ª•ng',
      });
      return;
    }

    if (!description.trim()) {
      setAlert({
        show: true,
        type: 'warning',
        message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£',
        description: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
      });
      return;
    }

    setBookingLoading(true);

    try {
      // Create return URLs for payment success and cancel
      const successUrl = `${window.location.origin}/payment-redirect?status=success`;
      const cancelUrl = `${window.location.origin}/payment-redirect?status=cancel`;
      
      const response = await placeOrder(
        seminar.id,
        seminar.price,
        currentUser.id,
        description.trim(),
        successUrl,
        cancelUrl
      );

      console.log('Place order response:', response);

      // Store pending payment data for later reference
      localStorage.setItem('pendingPayment', JSON.stringify({
        seminarId: seminar.id,
        seminarTitle: seminar.title,
        price: seminar.price,
        description: description.trim(),
        timestamp: new Date().toISOString(),
        sagaId: response.sagaId,
        orderCode: response.orderCode
      }));

      // Show success message briefly before redirect
      setAlert({
        show: true,
        type: 'success',
        message: 'ƒê·∫∑t v√© th√†nh c√¥ng!',
        description: 'ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n...',
      });

      // Reset booking loading state before redirect
      setBookingLoading(false);

      // Redirect to payment gateway after a short delay
      setTimeout(() => {
        window.location.href = response.checkoutUrl;
      }, 1500);
      
    } catch (error: any) {
      console.error('Booking error:', error);
      
      // More specific error messages based on error type
      let errorMessage = 'ƒê·∫∑t v√© th·∫•t b·∫°i';
      let errorDescription = 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t v√©. Vui l√≤ng th·ª≠ l·∫°i sau.';
      
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage = 'L·ªói k·∫øt n·ªëi';
        errorDescription = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
      } else if (error.message) {
        errorDescription = error.message;
      }
      
      setAlert({
        show: true,
        type: 'error',
        message: errorMessage,
        description: errorDescription,
      });
      setBookingLoading(false);
    }
  };

  const isAuthenticated = !!getToken();
  const canBook = seminar && seminar.status === 'ONGOING' && seminar.statusApprove === 'APPROVED';
  
  // Check if we should show full details (Meeting URL and Form ƒëƒÉng k√Ω)
  // Only show if user has a valid ticket for THIS specific seminar
  // Even if coming from tickets page with showDetails=true, we still validate ticket ownership
  const showFullDetails = userHasTicket;
  
  console.log('üîç Show full details decision:', {
    userHasTicket,
    showDetailsParam: searchParams.get('showDetails'),
    finalDecision: showFullDetails
  });

  // Function to reset booking state
  const resetBookingState = () => {
    setBookingLoading(false);
    setAlert({
      show: false,
      type: 'success',
      message: '',
    });
  };


  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!seminar) return <p>Kh√¥ng t√¨m th·∫•y h·ªôi th·∫£o</p>;

  return (
    <div className="seminar-detail-page">
      {alert.show && (
        <Alert
          type={alert.type}
          message={alert.message}
          description={alert.description}
          onClose={() => setAlert((prev) => ({ ...prev, show: false }))}
        />
      )}
      
      <div className="seminar-header">
        <h1>{seminar.title}</h1>
        <img src={seminar.imageUrl} alt={seminar.title} className="seminar-detail-img" />
      </div>
      
      <div className="seminar-info">
        <p><strong>M√¥ t·∫£:</strong> {seminar.description}</p>
        <p><strong>Th·ªùi l∆∞·ª£ng:</strong> {seminar.duration} ph√∫t</p>
        <p><strong>Gi√°:</strong> {seminar.price === 0 ? 'Mi·ªÖn ph√≠' : `${seminar.price.toLocaleString()}‚Ç´`}</p>
        <p><strong>Slot:</strong> {seminar.slot}</p>
        <p><strong>Th·ªùi gian b·∫Øt ƒë·∫ßu:</strong> {new Date(seminar.startingTime).toLocaleString('vi-VN')}</p>
        <p><strong>Th·ªùi gian k·∫øt th√∫c:</strong> {new Date(seminar.endingTime).toLocaleString('vi-VN')}</p>
        
        {/* Only show Meeting URL and Form ƒëƒÉng k√Ω if user has ticket or showDetails=true */}
        {showFullDetails ? (
          <>
            <p><strong>Meeting URL:</strong> <a href={seminar.meetingUrl} target="_blank" rel="noreferrer">{seminar.meetingUrl}</a></p>
            <p><strong>Form ƒëƒÉng k√Ω:</strong> <a href={seminar.formUrl} target="_blank" rel="noreferrer">{seminar.formUrl}</a></p>
          </>
        ) : (
          <>
            <p><strong>Meeting URL:</strong> <span style={{ color: '#888', fontStyle: 'italic' }}>Ch·ªâ hi·ªÉn th·ªã sau khi mua v√©</span></p>
            <p><strong>Form ƒëƒÉng k√Ω:</strong> <span style={{ color: '#888', fontStyle: 'italic' }}>Ch·ªâ hi·ªÉn th·ªã sau khi mua v√©</span></p>
          </>
        )}
        
        <p><strong>Tr·∫°ng th√°i:</strong> {seminar.status}</p>
        <p><strong>Tr·∫°ng th√°i duy·ªát:</strong> {seminar.statusApprove}</p>
        
        {/* Show ticket status for logged-in users */}
        {isAuthenticated && !checkingTicket && (
          <p><strong>Tr·∫°ng th√°i v√©:</strong> 
            <span style={{ 
              color: userHasTicket ? '#28a745' : '#dc3545',
              fontWeight: 'bold',
              marginLeft: '8px'
            }}>
              {userHasTicket ? '‚úÖ ƒê√£ mua v√©' : '‚ùå Ch∆∞a mua v√©'}
            </span>
          </p>
        )}
        
        {checkingTicket && (
          <p><strong>Tr·∫°ng th√°i v√©:</strong> <span style={{ color: '#888' }}>ƒêang ki·ªÉm tra...</span></p>
        )}
      </div>

      {/* Booking Form */}
      <div className="booking-section">
        <h3>ƒê·∫∑t v√© h·ªôi th·∫£o</h3>
        
        {!isAuthenticated && (
          <div className="auth-warning">
            <p>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√© h·ªôi th·∫£o.</p>
            <Button 
              variant="primary" 
              onClick={() => navigate('/login')}
            >
              ƒêƒÉng nh·∫≠p
            </Button>
          </div>
        )}

        {isAuthenticated && canBook && (
          <div className="booking-form">
            <div className="form-group">
              <label htmlFor="description">M√¥ t·∫£ (b·∫Øt bu·ªôc) - {description.length}/25 k√Ω t·ª±:</label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => {
                  if (e.target.value.length <= 25) {
                    setDescription(e.target.value);
                  }
                }}
                placeholder="Nh·∫≠p l√Ω do tham gia h·ªôi th·∫£o..."
                rows={4}
                className="description-input"
                required
                maxLength={25}
              />
              {description.length === 25 && (
                <small style={{ color: '#ff6b6b', fontSize: '12px' }}>
                  ƒê√£ ƒë·∫°t gi·ªõi h·∫°n t·ªëi ƒëa 25 k√Ω t·ª±
                </small>
              )}
            </div>
            
            <div className="booking-summary">
              <h4>Th√¥ng tin ƒë·∫∑t v√©:</h4>
              <p><strong>H·ªôi th·∫£o:</strong> {seminar.title}</p>
              <p><strong>Gi√°:</strong> {seminar.price === 0 ? 'Mi·ªÖn ph√≠' : `${seminar.price.toLocaleString()}‚Ç´`}</p>
              <p><strong>Ng∆∞·ªùi ƒë·∫∑t:</strong> {currentUser?.fullName || currentUser?.email}</p>
            </div>
            
            <Button 
              variant="primary" 
              onClick={handleBookTicket}
              disabled={bookingLoading || !description.trim()}
              className="book-button"
            >
              {bookingLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t v√© ngay'}
            </Button>
            
            {alert.show && alert.type === 'error' && (
              <Button 
                variant="outline" 
                onClick={resetBookingState}
                className="retry-button"
                style={{ marginTop: '12px', width: '100%' }}
              >
                Th·ª≠ l·∫°i
              </Button>
            )}
          </div>
        )}

        {isAuthenticated && !canBook && (
          <div className="booking-disabled">
            <p>
              {seminar.statusApprove !== 'APPROVED' 
                ? 'H·ªôi th·∫£o ch∆∞a ƒë∆∞·ª£c duy·ªát' 
                : seminar.status !== 'ONGOING' 
                ? 'H·ªôi th·∫£o hi·ªán kh√¥ng m·ªü ƒëƒÉng k√Ω'
                : 'Kh√¥ng th·ªÉ ƒë·∫∑t v√© l√∫c n√†y'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default SeminarDetailPage;
